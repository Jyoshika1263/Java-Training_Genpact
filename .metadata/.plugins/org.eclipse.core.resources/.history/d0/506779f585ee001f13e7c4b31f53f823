package JUnit;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class OrderService2Test {
    private OrderService2 orderService2;
    @BeforeEach // initialize orderservice2 before each test case
    public void setUp() {
    	orderService2 = new OrderService2();
    }
	@Test
	void test() {
		fail("Not yet implemented");
	}
	@Test
	public void TestCalPrice_ValidInputs() {
		double price=100.00;
		int quantity=2;
		double expectedPrice=price*quantity*(1-orderService2.getDiscount());
		assertEquals(expectedPrice, orderService2.calPrice(price, quantity)); //checking calPrice()
	}
	// test case -> 0 quantity
	
	//successfully place order -> assertTrue,
	@Test
    public void TestPlaceOrder_Success() {
        assertTrue(orderService2.placeOrder(5));
        assertEquals(5, orderService2.getStock());
    }
	//positive cases
	@Test
    public void TestPlaceOrder_ValidQuantity() {
        assertTrue(orderService2.placeOrder(3));
        assertEquals(7, orderService2.getStock());
    }

    // Negative test cases
    @Test
    public void TestPlaceOrder_InsufficientStock() {
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            orderService2.placeOrder(15);
        });
        assertEquals("insufficient stock", exception.getMessage());
    }
	
	//order with zero quantity
    @Test
    public void TestPlaceOrder_ZeroQuantity() {
        assertTrue(orderService2.placeOrder(0));
        assertEquals(10, orderService2.getStock());
    }
	//order where price is negative
    @Test
    public void TestCalPrice_NegativePrice() {
        double price = -100.00;
        int quantity = 2;
        assertThrows(IllegalArgumentException.class, () -> {
            orderService2.calPrice(price, quantity);
        });
    }
	
	//boundary test cases edge cases
    @Test
    public void TestPlaceOrder_ExactStock() {
        assertTrue(orderService2.placeOrder(10));
        assertEquals(0, orderService2.getStock());
    }
	
	//quantity exactly same as stock
	
	//order just below stock limit->stock 10->ordering 9
    @Test
    public void TestPlaceOrder_JustBelowStockLimit() {
        assertTrue(orderService2.placeOrder(9));
        assertEquals(1, orderService2.getStock());
    }
	
	
}
