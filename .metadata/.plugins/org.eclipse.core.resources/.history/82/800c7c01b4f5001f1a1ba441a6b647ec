<!--
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Welcome to javascript</title>
<style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        h1 {
            color: #333;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
</style>
</head>
<body>
<h1>Welcome to Online Book Shop</h1>
<table>
<tr>
<th>BookID</th>
<th>Title</th>
<th>Author</th>
<th>Price</th>
</tr>
<tr>
<td>1</td>
<td>Book1</td>
<td>author1</td>
<td>99</td>
</tr>
<tr>
<td>2</td>
<td>B</td>
<td>bb</td>
<td>500</td>
</tr>
<tr>
<td>3</td>
<td>C</td>
<td>cc</td>
<td>200</td>
</tr>
</table>
</body>
</html>
-->




<!-- 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Form</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>

<h2>Book form</h2>

<form action="/submit" method="post">
    <label for="name">Book Name:</label>
    <input type="text" id="name" name="name" required>

    <label for="email">Author:</label>
    <input type="email" id="email" name="email" required>

    <label for="message">Price:</label>
    <textarea id="message" name="message" rows="4" required></textarea>

    <button type="submit">Add book</button>
</form>

</body>
</html>
-->

<!-- 
<!DOCTYPE html>
<html>
<head>
<title> Online Book Shop </title>
</head>
<body>
<h1 id='heading'> Welcome to JavaScript</h1>
<p class="message"> Welcome to javaScript </p>
<button id='btn'>Click Me</button>
</body>
<script>
 
		/*function example(){
			let x=10;
			if(true){
				let  x =20
				console.log(x);
			}
			console.log(x);
		}
		example();
		*/
		function example1(){
			console.log(5 == '5');  // Equal to (Loose comparison) -> true (only checks value)
			console.log(5 === '5'); // Strict equal to -> false (checks type and value)
			 
			console.log(5 != '5');  // Not equal -> false
			console.log(5 !== '5'); // Strict not equal -> true
			 
			// Logical Operators
			console.log(5 > 3 && 5 > 2);  // AND (both conditions must be true) -> true
			console.log(5 > 3 || 5 < 2);  // OR (at least one condition is true) -> true
			console.log(!(5 > 3));        // NOT (negates the condition) -> false
			   let a = 10;
	            let b = 20;
	            let c = "20";
	            console.log('Arithmetic Operators:');
	            console.log('a + b =', a + b);
	            console.log('a - b =', a - b);
	            console.log('a * b =', a * b);
	            console.log('a / b =', a / b);
	            console.log('a % b =', a % b);
	            console.log('a++ =', a++);
	            console.log('++a =', ++a);
	            console.log('a-- =', a--);
	            console.log('--a =', --a);
			 
			let name = "Tanuj";
		    console.log("Hello, " + name + " Welcome");
		 
		    name = "Tanuj";
		    console.log(`Hello, ${name} Welcome`);
		 
		    let text = "This is line1. \n" + "This is line2.";
		    console.log(text);
		 
		    text = `This is line1.
					This is line2.`;
		    console.log(text);
		 
		    let product = "Laptop";
		    let price = 55000;
		    console.log(`The price of ${product} is ${price}`);
		    
		    let text1 = "JavaScript Learning..."
		    	 
		    	console.log(text1.length); //->return string length
		    	console.log(text1.toUpperCase());
		    	console.log(text1.toLowerCase());
		    	console.log(text1.trim());
		    	console.log(text1.slice(2,10));
		    	console.log(text1.replace("Java","type"));
		    	//console.log(text.split(separator));
		    	console.log(text1.split(","));
		    	 
		    	
		    	//index from 0
		    	//accesss array elemnts ->array
	    	 
		    	//Array methods :
		    		//Array methods
    let numbers = [10, 20, 30, 40, 50];
    let gadgets = ["Laptop", "Smartphone", "TV"];
    console.log(gadgets[2]);
 
    gadgets.push("Earphone");
    console.log(gadgets);
 
    gadgets.pop();
    console.log(gadgets);
 
    gadgets.shift();
    console.log(gadgets);
 
    gadgets.unshift("Mic");
    console.log(gadgets);
 
    console.log(gadgets.indexOf("Smartphone"));
    console.log(gadgets.includes("Earphone"));
 
    console.log(gadgets.slice(1, 2));
 
    gadgets.splice(1, 2);
    console.log(gadgets);
 
    console.log(gadgets.join(" - "));
 
    gadgets.reverse();
    console.log(gadgets);
 
    gadgets.sort();
    console.log(gadgets);
 
    gadgets.forEach(gadget => console.log(gadget));
 
    let squaredNumbers = numbers.map(num => num * num);
    console.log(squaredNumbers);
		    	 
		    	// console.log(gadgets.push("Earphone"));
		    	// console.log(gadgets.pop()); // ->remove last item ->
		    	// console.log(gadgets.shift()); //-> remove first item ->
		    	// console.log(gadgets.unshift("Mic")); // -> add item at beginning of array ->
		    	// console.log(gadgets.indexOf(2)); //-> find a index of value
		    	 //console.log(gadgets.includes(3)); // ->check if value exsist
		    	// console.log(gadgets.slice(1,3)); // ->return part of an array
		    	 //console.log(gadgets.splice(1,2)); // ->remove item ->gadgets(index,count) -> start from index1 and remove 2 elemts
		    	// console.log(gadgets.join("-")); //.join(separator) ->convert array into string ->
		    	// console.log(gadgets.reverse()); // -> reverse array
		    	 //console.log(gadgets.sort()); // ->sort array
		    	 
		    	//looping through array
		    	 
		    	//->using for Each
		    	gadgets.forEach((gadget) => console.log(gadget));
		    	 
		    	//->map() ->return s new arrays
		    	num=1;
		    	let squarednumbers = numbers.map(num => num*num);
		    	// Deleting a property from an object
		    	let person = {
		    	    name: "John",
		    	    age: 30,
		    	    hasVoterCard: true
		    	};
		    	 
		    	delete person.hasVoterCard;
		    	console.log(person);  // { name: "John", age: 30 }
		    	 
		    	// Objects can have functions as properties
		    	let user = {
		    	    name: "Tanuj",
		    	    greet: function() {
		    	console.log(`Hello, my name is ${this.name}`);
		    	    }
		    	};
		    	 
		    	user.greet();  // Output: Hello, my name is Tanuj
		    	 
		    	// Object Destructuring (ES6)
		    	// Extract object properties using shorter syntax
		    	let personData = { name1: "Ajay", age: 25, city: "Delhi" };
		    	let { name1, age, city } = personData;
		    	console.log(age);  // Output: 25
		    	 
		    	// Object Spread Operator (ES6)
		    	// Used for copying or merging objects
		    	 
		    	// Copy objects
		    	let obj1 = { a: 12, b: 15 };
		    	let obj2 = { ...obj1, c: 20 };
		    	console.log(obj2);  // Output: { a: 12, b: 15, c: 20 }
		    	 
		    	// Merge objects
		    	let userP = { name2: "Tanuj", age: 25 };
		    	let userLoc = { city: "MP", country: "India" };
		    	let userAll = { ...userP, ...userLoc };
		    	 
		    	console.log(userAll);  
		    	// Output: { name: "Tanuj", age: 25, city: "MP", country: "India" }
		    	for (let key in person) {
		            console.log(key + ": " + person[key]);
		        }
		 
		        for (let gadget of gadgets) {
		            console.log(gadget);
		        }
		 
		        for (let number of numbers) {
		            console.log(number);
		        }


		 
		        const add = function(a, b) {
		            return a + b;
		        };
		        console.log(add(4, 5));
		 
		        const multiply = (x, y) => x * y;
		        console.log(multiply(12, 23));
		 
		        const cube = x => x * x * x;
		        console.log(cube(5));
		 
		        const greet = (name) => {
		            let message = `Hello, ${name}, Welcome`;
		            return message;
		        };
		        console.log(greet("Tanuj"));
		 
		        // Higher Order Function (HOF)
		        const hofExample = (fn, x, y) => {
		            return fn(x, y);
		        };
		        console.log(hofExample(add, 4, 5));
		 
		        // Object with function as property
		        let user2 = {
		            name: "Tanuj",
		            greet: function() {
		                console.log(`Hello, my name is ${this.name}`);
		            }
		        } 
		    	
		
		// HotelManagementSystem

		// Sample hotel rooms data
		const hotelRooms = [
		    { type: "standard", price: 5000, available: true },
		    { type: "deluxe", price: 10000, available: true },
		    { type: "suite", price: 15000, available: false },
		    { type: "presidential", price: 20000, available: true }
		];

		// Function to find available rooms based on price range
		function findAvailableRooms(rooms, minPrice, maxPrice) {
		    return rooms.filter(room => 
		        room.available && room.price >= minPrice && room.price <= maxPrice
		    ).map(room => ({
		        type: room.type,
		        price: room.price
		    }));
		}

		// Function call
		const availableRooms = findAvailableRooms(hotelRooms, 5000, 15000);
		console.log(availableRooms);
		
		// ShoppingCart

		// Sample cart items data
		const cartItems = [
		    { name: "Phone", price: 55000, quantity: 1 },
		    { name: "Bottle", price: 1500, quantity: 2 },
		    { name: "Keyboard", price: 3000, quantity: 1 }
		];

		// Function to generate receipt
		function generateReceipt(cart) {
		    let total = 0;
		    console.log("Receipt:");
		     console.log("------------------------------");
		     cart.forEach(item => {
		         const itemTotal = item.price * item.quantity;
		         console.log(`${item.name} - Price: ₹${item.price}, Quantity: ${item.quantity}, Total: ₹${itemTotal}`);
		         total += itemTotal;
		     });

		     console.log("------------------------------");
		     console.log(`Total Price: ₹${total}`);
		}
		 
		generateReceipt(cartItems);
		
		// Student Report Card

		// Sample student data
		// Creating a constant object with student data
        const studentData = [
            { 
                name: "Jyoshika", 
                marks: { math: 85, science: 90, english: 88 } 
            },
            { 
                name: "Sanjana", 
                marks: { math: 78, science: 82, english: 80 } 
            },
            { 
                name: "Neelima", 
                marks: { math: 92, science: 95, english: 94 } 
            },
            { 
                name: "Amrutha", 
                marks: { math: 70, science: 75, english: 72 } 
            }
        ];
 
        // Function to generate report card for a student
        function generateReportCard(student) {
            let { name, marks } = student;
            let totalMarks = marks.math + marks.science + marks.english;
            let averageMarks = totalMarks / 3;
            let percentage = (totalMarks / 300) * 100;
 
            console.log(`Report card for ${name}:`);
            console.log(`Total marks: ${totalMarks}`);
            console.log(`Average marks: ${averageMarks}`);
            console.log(`Percentage: ${percentage}%`);
        }
 
        // Generating report cards for all students
        studentData.forEach(student => generateReportCard(student));
        

        document.addEventListener("DOMContentLoaded", () => {

            // 1. Select elements using different methods

            const heading = document.getElementById("heading");

            const messages = document.getElementsByClassName("message");

            const h1Headings = document.getElementsByTagName("h1");
         
            // Query Selectors

            const headingQuery = document.querySelector("#heading"); // Select by ID

            const messageQuery = document.querySelector(".message"); // Select by Class
         
            // 2. Modifying DOM Elements

            if (heading) {

                console.log("Original Heading:", heading.textContent);

                heading.textContent = "New Content";

            }
         
            if (messageQuery) {

                messageQuery.innerHTML = "<strong>Updated Message</strong>";

            }
         
            // Disable a button

            const button = document.querySelector("#btn");

            if (button) {

                button.setAttribute("disabled", "true"); // Disable the button

            }
         
            // 3. Event Handling

            if (button) {

                button.removeAttribute("disabled"); // Enable button again

                button.addEventListener("click", () => {

                    heading.textContent = "Heading Changed!";

                    alert("Button Clicked!");

                });
         
                // Change background color on mouseover

                button.addEventListener("mouseover", () => {

        button.style.backgroundColor = "lightblue";

                });
         
                button.addEventListener("mouseout", () => {

        button.style.backgroundColor = "";

                });
         
                // Keypress event listener

                document.addEventListener("keypress", (event) => {

                    console.log("Key Pressed:", event.key);

                });

            }

        });
         
		}
		example1();
	
</script>
</html>
-->

<!DOCTYPE html>
<html lang="em">
<head>
<title> JavaScript </title>
</head>
<body>
    <h1 id='heading'> Welcome to JavaScript</h1>
    <p class="message"> Welcome to javaScript </p>
    <button id='btn'>Click Me</button>
</body>
<script>
function fetchData() {

	return new Promise((resolve, reject) => {

		console.log("fetching data----------");

    	setTimeout(() => {

    		let success =true;

    		if(success){

        		resolve({ name: "Amrutha", age: 22 });

    		}

    		else {

    			reject("Error : Failed to fetch data");

    		}

    	}, 3000);

	});

}

//fetchData()

	//.then((data) => {

	    //console.log("Processing data------",data);
        //return {...data, city:"ND"};
	//})
	//.then((updatedData) => {
		//console.log("Processing updated Data...",updatedData);
	//})

	//.catch((error) => {

 	   //console.error(error);

	//});
	//using the promise
	async function getData(){
		console.log("Fetching data....");
		try{
			let data=await fetchData();
			console.log("Processing data:",data);
		    let updatedData = { ...data, city: "ND" };
	        console.log("Processing updated data...", updatedData);
	    }
		catch(error){
			console.log("error :",error);
		}
	}
	getData();
	//fetch API -> promise
	/*function fetchUserData(){
		//make GET request
		fetch("https://jsonplaceholder.typicode.com/users")
		.then((response) => {
			if(!response.ok) {
				throw new Error(`Http error : status : ${response.status}`);
			}
			return response.json();
		})
	.then((data) => {
		console.log("Users data: ",data);
	})
	.catch((error) => {
		console.log("Error : ",error);
	});
	}
	fetchUserData(); */
	/*async function fetchUserData() {
	    console.log("Fetching user data...");
	    try {
	        const response = await fetch("https://jsonplaceholder.typicode.com/users");
	        if (!response.ok) {
	            throw new Error(`HTTP error: status: ${response.status}`);
	        }
	        const data = await response.json();
	        console.log("Users data:", data);
	    } catch (error) {
	        console.error("Error:", error);
	    }
	}

	fetchUserData(); */
	/*async function fetchDataById(id) {
	    console.log("Fetching data for ID:", id);
	    try {
	        const response = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`);
	        if (!response.ok) {
	            throw new Error(`HTTP error: status: ${response.status}`);
	        }
	        const data = await response.json();
	        console.log("User data:", data);
	    } catch (error) {
	        console.error("Error:", error);
	    }
	}

	// Fetch data for a specific ID, for example, ID 1
	fetchDataById(1);*/
	/*async function fetchAllUsers(userIds) {
	    try {
	        // array of fetch Promises
	        let userPromises = userIds.map((id) =>
	            fetch(`https://jsonplaceholder.typicode.com/users/${id}`)
	                .then((response) => {
	                    if (!response.ok) {
	                        throw new Error(`http error: status: ${response.status}`);
	                    }
	                    return response.json();
	                })
	        );
	        let users = await Promise.all(userPromises);
 
	        console.log("Success: All user data fetched", users);
	    } catch (error) {
	        console.error("Error:", error);
	    }
	}
	fetchAllUsers([2, 6, 7, 1, 5]); */
	/* function fetchUserData() {
	    fetch("https://jsonplaceholder.typicode.com/users")
	    .then((response) => {
	    	if(!response.ok) {
	            throw new Error(`HTTP error: status: ${response.status}`);
	        }
	    	return response.json();
	    })
	    .then((data) => {
	    	console.log("Users data:",data);
	    })
	    .catch((error) => {
	        console.error("Error:", error);
	    });
	}

	fetchUserData(); */
	function fetchUserData() {
	    fetch("https://jsonplaceholder.typicode.com/users")
	        .then((response) => {
	            if (!response.ok) {
	                throw new Error(`Http error: status : ${response.status}`);
	            }
	            return response.json();
	        })
	        .then((data) => {
	            setTimeout(() => {
	                console.log("User Data: ", data); // Delayed by 3 seconds
	            }, 3000); // 3000 milliseconds = 3 seconds
	        })
	        .catch((error) => {
	            console.log("Error: ", error);
	        });
	}
	 
	//Function to create a new user (POST request)
	function createUser(newUser) {
	    fetch("https://jsonplaceholder.typicode.com/users", { // Replace with your actual URL
	        method: "POST",
	        headers: {
	            "Content-Type": "application/json" // Indicates JSON data is being sent
	        },
	        body: JSON.stringify(newUser) // Converts the object to a JSON string
	    })
	    .then(response => response.json())
	    .then(data => {
	        console.log("User created successfully:", data); // Success message
	    })
	    .catch(error => {
	        console.error("Error creating user:", error); // Error handling
	    });
	}
	 
	// Example usage of createUser function
	let user = { name: "Ram", email: "ram@gmail.com" };
	createUser(user);
	console.log(user);
	 
	fetchUserData();
	 


	
</script>
</html>



